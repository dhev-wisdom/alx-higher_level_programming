#!/usr/bin/python3
"""
File that contains doctest for 'matrix_divided' function
"""

def matrix_divided(matrix, div):
    """
    Divides all elements a matrix by a given number

    :param matrix: matrix to be diviided
    :param div: The number to divide by
    :return: A new matrix with elements divided by div

    Examples:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[10, 20, 30], [40, 50, 60]], 3)
    [[3.33, 6.67, 10.0], [13.33, 16.67, 20.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2], [3, 4, 5]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided('invalid', 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'divisor')
    Traceback (most recent call last):
    ...
    TypeError: div must be a number
    """


    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
    if not all(len(row) == len(matrix[0]) for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")

    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")

    if div == 0:
        raise ZeroDivisionError("division by zero")

    return [[round(element/div, 2) for element in row] for row in matrix]


if __name__ == '__main__':
    import doctest
    doctest.testmod()
