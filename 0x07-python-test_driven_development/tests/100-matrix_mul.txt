#!/usr/bin/python3
"""
module contains doctest for matrix_mul function
"""


def matrix_mul(m_a, m_b):
    """
    Multiplies two matrices and returns the result.

    :param m_a: The first matrix.
    :param m_b: The second matrix.
    :return: The resulting matrix after multiplication.

    Examples:
    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
    [[19, 22], [43, 50]]

    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
    [[58, 64], [139, 154]]

    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6, 7], [8, 9, 10]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 'eight']])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], 'not a matrix')
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty
    """

    if not isinstance(m_a, list):
        raise TypeError("m_a must be a list")
    if not isinstance(m_b, list):
        raise TypeError("m_b must be a list")

    if not all(isinstance(row, list) for row in m_a):
        raise TypeError("m_a must be a list of lists")
    if not all(isinstance(row, list) for row in m_b):
        raise TypeError("m_b must be a list of lists")

    if len(m_a) == 0:
        raise ValueError("m_a can't be empty")
    if len(m_b) == 0:
        raise ValueError("m_b can't be empty")

    if any(not all(isinstance(element, (int, float)) for
                   element in row) for row in m_a):
        raise TypeError("m_a should contain only integers or floats")

    if any(not all(isinstance(element, (int, float)) for
                   element in row) for row in m_b):
        raise TypeError("m_b should contain only integers or floats")

    if any(len(row) != len(m_a[0]) for row in m_a):
        raise TypeError("each row of m_a must be of the same size")
    if any(len(row) != len(m_b[0]) for row in m_b):
        raise TypeError("each row of m_b must be of the same size")

    if len(m_a[0]) != len(m_b):
        raise ValueError("m_a and m_b can't be multiplied")

    # Perform matrix multiplication
    result = [[0] * len(m_b[0]) for _ in range(len(m_a))]

    for i in range(len(m_a)):
        for j in range(len(m_b[0])):
            for k in range(len(m_b)):
                result[i][j] += m_a[i][k] * m_b[k][j]

    return result


if __name__ == "__main__":
    import doctest
    doctest.testmod()
